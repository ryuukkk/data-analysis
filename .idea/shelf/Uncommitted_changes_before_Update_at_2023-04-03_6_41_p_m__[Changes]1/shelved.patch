Index: DE_PROJECT.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n \"cells\": [\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 63,\r\n   \"metadata\": {\r\n    \"collapsed\": true,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-04-02T10:36:02.532948Z\",\r\n     \"end_time\": \"2023-04-02T10:36:02.544943Z\"\r\n    }\r\n   },\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"import pandas as pd\\n\",\r\n    \"import numpy as np\\n\",\r\n    \"import matplotlib.pyplot as plt\\n\",\r\n    \"import seaborn as sns\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"#### Loading the original data\\n\",\r\n    \"The dataset consists of 3 csv files -\\n\",\r\n    \" * **goalscorers.csv**, which contains all the goals scores in international football history\\n\",\r\n    \" * **results.csv**, which contains all the matches since 1876\\n\",\r\n    \" * **shootouts.csv** which contains all the penalty shoot-outs.\\n\",\r\n    \"\\n\",\r\n    \"Link to data: [Football Matches 1876 - 2022](https://www.kaggle.com/datasets/martj42/international-football-results-from-1872-to-2017)\\n\",\r\n    \"\\n\",\r\n    \"**!!!**  <i>IT IS IMPORTANT TO NOTE THAT THE RESULTS IN THIS NOTEBOOK ARE DEPENDENT ON THE DATA. I NOTICED SOME FALSE RESULTS WHILE WORKING WITH THE DATASET; WHEN CHECKED, TURNS OUT THAT THE DATA IS INCOMPLETE AT SOURCE (THE SOURCE ITSELF SAYS SO)</i>\\n\",\r\n    \"For this reason, I will be focussing on numbers less, and qualitative data more.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 2,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"goals = pd.read_csv('data/goalscorers.csv')\\n\",\r\n    \"matches = pd.read_csv('data/results.csv')\\n\",\r\n    \"penalties = pd.read_csv('data/shootouts.csv')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-03-31T06:20:44.064092Z\",\r\n     \"end_time\": \"2023-03-31T06:20:44.214865Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Let us have a quick look at the data.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 3,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"             date  home_team away_team       team            scorer  minute  \\\\\\n0      1916-07-02      Chile   Uruguay    Uruguay   José Piendibene    44.0   \\n1      1916-07-02      Chile   Uruguay    Uruguay  Isabelino Gradín    55.0   \\n2      1916-07-02      Chile   Uruguay    Uruguay  Isabelino Gradín    70.0   \\n3      1916-07-02      Chile   Uruguay    Uruguay   José Piendibene    75.0   \\n4      1916-07-06  Argentina     Chile  Argentina     Alberto Ohaco     2.0   \\n...           ...        ...       ...        ...               ...     ...   \\n41003  2022-12-18  Argentina    France  Argentina    Ángel Di María    36.0   \\n41004  2022-12-18  Argentina    France     France     Kylian Mbappé    80.0   \\n41005  2022-12-18  Argentina    France     France     Kylian Mbappé    81.0   \\n41006  2022-12-18  Argentina    France  Argentina      Lionel Messi   109.0   \\n41007  2022-12-18  Argentina    France     France     Kylian Mbappé   118.0   \\n\\n       own_goal  penalty  \\n0         False    False  \\n1         False    False  \\n2         False    False  \\n3         False    False  \\n4         False    False  \\n...         ...      ...  \\n41003     False    False  \\n41004     False     True  \\n41005     False    False  \\n41006     False    False  \\n41007     False     True  \\n\\n[41008 rows x 8 columns]\",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>date</th>\\n      <th>home_team</th>\\n      <th>away_team</th>\\n      <th>team</th>\\n      <th>scorer</th>\\n      <th>minute</th>\\n      <th>own_goal</th>\\n      <th>penalty</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>1916-07-02</td>\\n      <td>Chile</td>\\n      <td>Uruguay</td>\\n      <td>Uruguay</td>\\n      <td>José Piendibene</td>\\n      <td>44.0</td>\\n      <td>False</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>1916-07-02</td>\\n      <td>Chile</td>\\n      <td>Uruguay</td>\\n      <td>Uruguay</td>\\n      <td>Isabelino Gradín</td>\\n      <td>55.0</td>\\n      <td>False</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>1916-07-02</td>\\n      <td>Chile</td>\\n      <td>Uruguay</td>\\n      <td>Uruguay</td>\\n      <td>Isabelino Gradín</td>\\n      <td>70.0</td>\\n      <td>False</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>3</th>\\n      <td>1916-07-02</td>\\n      <td>Chile</td>\\n      <td>Uruguay</td>\\n      <td>Uruguay</td>\\n      <td>José Piendibene</td>\\n      <td>75.0</td>\\n      <td>False</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>4</th>\\n      <td>1916-07-06</td>\\n      <td>Argentina</td>\\n      <td>Chile</td>\\n      <td>Argentina</td>\\n      <td>Alberto Ohaco</td>\\n      <td>2.0</td>\\n      <td>False</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>...</th>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n    </tr>\\n    <tr>\\n      <th>41003</th>\\n      <td>2022-12-18</td>\\n      <td>Argentina</td>\\n      <td>France</td>\\n      <td>Argentina</td>\\n      <td>Ángel Di María</td>\\n      <td>36.0</td>\\n      <td>False</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>41004</th>\\n      <td>2022-12-18</td>\\n      <td>Argentina</td>\\n      <td>France</td>\\n      <td>France</td>\\n      <td>Kylian Mbappé</td>\\n      <td>80.0</td>\\n      <td>False</td>\\n      <td>True</td>\\n    </tr>\\n    <tr>\\n      <th>41005</th>\\n      <td>2022-12-18</td>\\n      <td>Argentina</td>\\n      <td>France</td>\\n      <td>France</td>\\n      <td>Kylian Mbappé</td>\\n      <td>81.0</td>\\n      <td>False</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>41006</th>\\n      <td>2022-12-18</td>\\n      <td>Argentina</td>\\n      <td>France</td>\\n      <td>Argentina</td>\\n      <td>Lionel Messi</td>\\n      <td>109.0</td>\\n      <td>False</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>41007</th>\\n      <td>2022-12-18</td>\\n      <td>Argentina</td>\\n      <td>France</td>\\n      <td>France</td>\\n      <td>Kylian Mbappé</td>\\n      <td>118.0</td>\\n      <td>False</td>\\n      <td>True</td>\\n    </tr>\\n  </tbody>\\n</table>\\n<p>41008 rows × 8 columns</p>\\n</div>\"\r\n     },\r\n     \"execution_count\": 3,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"goals\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-03-31T06:20:44.214865Z\",\r\n     \"end_time\": \"2023-03-31T06:20:44.234912Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 4,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"             date                     home_team                 away_team  \\\\\\n0      1872-11-30                      Scotland                   England   \\n1      1873-03-08                       England                  Scotland   \\n2      1874-03-07                      Scotland                   England   \\n3      1875-03-06                       England                  Scotland   \\n4      1876-03-04                      Scotland                   England   \\n...           ...                           ...                       ...   \\n44552  2023-03-28                         Haiti                   Bermuda   \\n44553  2023-03-28                        Guyana                Montserrat   \\n44554  2023-03-28                       Bonaire  Turks and Caicos Islands   \\n44555  2023-03-28  United States Virgin Islands              Sint Maarten   \\n44556  2023-03-29                        Rwanda                     Benin   \\n\\n       home_score  away_score                            tournament  \\\\\\n0               0           0                              Friendly   \\n1               4           2                              Friendly   \\n2               2           1                              Friendly   \\n3               2           2                              Friendly   \\n4               3           0                              Friendly   \\n...           ...         ...                                   ...   \\n44552           3           1               CONCACAF Nations League   \\n44553           0           0               CONCACAF Nations League   \\n44554           1           2               CONCACAF Nations League   \\n44555           1           2               CONCACAF Nations League   \\n44556           1           1  African Cup of Nations qualification   \\n\\n                city                       country  neutral  \\n0            Glasgow                      Scotland    False  \\n1             London                       England    False  \\n2            Glasgow                      Scotland    False  \\n3             London                       England    False  \\n4            Glasgow                      Scotland    False  \\n...              ...                           ...      ...  \\n44552  San Cristóbal            Dominican Republic     True  \\n44553     Bridgetown                      Barbados     True  \\n44554         Rincon                       Bonaire    False  \\n44555    Saint Croix  United States Virgin Islands    False  \\n44556         Kigali                        Rwanda    False  \\n\\n[44557 rows x 9 columns]\",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>date</th>\\n      <th>home_team</th>\\n      <th>away_team</th>\\n      <th>home_score</th>\\n      <th>away_score</th>\\n      <th>tournament</th>\\n      <th>city</th>\\n      <th>country</th>\\n      <th>neutral</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>1872-11-30</td>\\n      <td>Scotland</td>\\n      <td>England</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>Friendly</td>\\n      <td>Glasgow</td>\\n      <td>Scotland</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>1873-03-08</td>\\n      <td>England</td>\\n      <td>Scotland</td>\\n      <td>4</td>\\n      <td>2</td>\\n      <td>Friendly</td>\\n      <td>London</td>\\n      <td>England</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>1874-03-07</td>\\n      <td>Scotland</td>\\n      <td>England</td>\\n      <td>2</td>\\n      <td>1</td>\\n      <td>Friendly</td>\\n      <td>Glasgow</td>\\n      <td>Scotland</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>3</th>\\n      <td>1875-03-06</td>\\n      <td>England</td>\\n      <td>Scotland</td>\\n      <td>2</td>\\n      <td>2</td>\\n      <td>Friendly</td>\\n      <td>London</td>\\n      <td>England</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>4</th>\\n      <td>1876-03-04</td>\\n      <td>Scotland</td>\\n      <td>England</td>\\n      <td>3</td>\\n      <td>0</td>\\n      <td>Friendly</td>\\n      <td>Glasgow</td>\\n      <td>Scotland</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>...</th>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n    </tr>\\n    <tr>\\n      <th>44552</th>\\n      <td>2023-03-28</td>\\n      <td>Haiti</td>\\n      <td>Bermuda</td>\\n      <td>3</td>\\n      <td>1</td>\\n      <td>CONCACAF Nations League</td>\\n      <td>San Cristóbal</td>\\n      <td>Dominican Republic</td>\\n      <td>True</td>\\n    </tr>\\n    <tr>\\n      <th>44553</th>\\n      <td>2023-03-28</td>\\n      <td>Guyana</td>\\n      <td>Montserrat</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>CONCACAF Nations League</td>\\n      <td>Bridgetown</td>\\n      <td>Barbados</td>\\n      <td>True</td>\\n    </tr>\\n    <tr>\\n      <th>44554</th>\\n      <td>2023-03-28</td>\\n      <td>Bonaire</td>\\n      <td>Turks and Caicos Islands</td>\\n      <td>1</td>\\n      <td>2</td>\\n      <td>CONCACAF Nations League</td>\\n      <td>Rincon</td>\\n      <td>Bonaire</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>44555</th>\\n      <td>2023-03-28</td>\\n      <td>United States Virgin Islands</td>\\n      <td>Sint Maarten</td>\\n      <td>1</td>\\n      <td>2</td>\\n      <td>CONCACAF Nations League</td>\\n      <td>Saint Croix</td>\\n      <td>United States Virgin Islands</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>44556</th>\\n      <td>2023-03-29</td>\\n      <td>Rwanda</td>\\n      <td>Benin</td>\\n      <td>1</td>\\n      <td>1</td>\\n      <td>African Cup of Nations qualification</td>\\n      <td>Kigali</td>\\n      <td>Rwanda</td>\\n      <td>False</td>\\n    </tr>\\n  </tbody>\\n</table>\\n<p>44557 rows × 9 columns</p>\\n</div>\"\r\n     },\r\n     \"execution_count\": 4,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"matches\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-03-31T06:20:44.234912Z\",\r\n     \"end_time\": \"2023-03-31T06:20:44.324956Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 5,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"           date    home_team         away_team       winner\\n0    1967-08-22        India            Taiwan       Taiwan\\n1    1971-11-14  South Korea  Vietnam Republic  South Korea\\n2    1972-05-07  South Korea              Iraq         Iraq\\n3    1972-05-17     Thailand       South Korea  South Korea\\n4    1972-05-19     Thailand          Cambodia     Thailand\\n..          ...          ...               ...          ...\\n542  2022-12-05        Japan           Croatia      Croatia\\n543  2022-12-06      Morocco             Spain      Morocco\\n544  2022-12-09      Croatia            Brazil      Croatia\\n545  2022-12-09  Netherlands         Argentina    Argentina\\n546  2022-12-18    Argentina            France    Argentina\\n\\n[547 rows x 4 columns]\",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>date</th>\\n      <th>home_team</th>\\n      <th>away_team</th>\\n      <th>winner</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>1967-08-22</td>\\n      <td>India</td>\\n      <td>Taiwan</td>\\n      <td>Taiwan</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>1971-11-14</td>\\n      <td>South Korea</td>\\n      <td>Vietnam Republic</td>\\n      <td>South Korea</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>1972-05-07</td>\\n      <td>South Korea</td>\\n      <td>Iraq</td>\\n      <td>Iraq</td>\\n    </tr>\\n    <tr>\\n      <th>3</th>\\n      <td>1972-05-17</td>\\n      <td>Thailand</td>\\n      <td>South Korea</td>\\n      <td>South Korea</td>\\n    </tr>\\n    <tr>\\n      <th>4</th>\\n      <td>1972-05-19</td>\\n      <td>Thailand</td>\\n      <td>Cambodia</td>\\n      <td>Thailand</td>\\n    </tr>\\n    <tr>\\n      <th>...</th>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n    </tr>\\n    <tr>\\n      <th>542</th>\\n      <td>2022-12-05</td>\\n      <td>Japan</td>\\n      <td>Croatia</td>\\n      <td>Croatia</td>\\n    </tr>\\n    <tr>\\n      <th>543</th>\\n      <td>2022-12-06</td>\\n      <td>Morocco</td>\\n      <td>Spain</td>\\n      <td>Morocco</td>\\n    </tr>\\n    <tr>\\n      <th>544</th>\\n      <td>2022-12-09</td>\\n      <td>Croatia</td>\\n      <td>Brazil</td>\\n      <td>Croatia</td>\\n    </tr>\\n    <tr>\\n      <th>545</th>\\n      <td>2022-12-09</td>\\n      <td>Netherlands</td>\\n      <td>Argentina</td>\\n      <td>Argentina</td>\\n    </tr>\\n    <tr>\\n      <th>546</th>\\n      <td>2022-12-18</td>\\n      <td>Argentina</td>\\n      <td>France</td>\\n      <td>Argentina</td>\\n    </tr>\\n  </tbody>\\n</table>\\n<p>547 rows × 4 columns</p>\\n</div>\"\r\n     },\r\n     \"execution_count\": 5,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"penalties\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-03-31T06:20:44.264946Z\",\r\n     \"end_time\": \"2023-03-31T06:20:44.356473Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Looking at the first two tables, I feel one more table can be formed by merging the two, which can be quite useful because then we will have all the goals in every match segregated at a place, instead of two different tables for the same purpose.\\n\",\r\n    \"\\n\",\r\n    \"However, merging operations might lead to increase the number of missing values even further if there already are missing values in the dataframes. So, we need to check for and treat missing values before merging.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 6,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"date          0\\nhome_team     0\\naway_team     0\\nhome_score    0\\naway_score    0\\ntournament    0\\ncity          0\\ncountry       0\\nneutral       0\\ndtype: int64\"\r\n     },\r\n     \"execution_count\": 6,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"matches.isna().sum()    #counts missing values for each column\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-03-31T06:20:44.284955Z\",\r\n     \"end_time\": \"2023-03-31T06:20:44.395006Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 7,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"date         0\\nhome_team    0\\naway_team    0\\nwinner       0\\ndtype: int64\"\r\n     },\r\n     \"execution_count\": 7,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"penalties.isna().sum()\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-03-31T06:20:44.324956Z\",\r\n     \"end_time\": \"2023-03-31T06:20:44.395006Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Thankfully, **matches** and **penalties** tables do not have any missing values.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 8,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"date           0\\nhome_team      0\\naway_team      0\\nteam           0\\nscorer        49\\nminute       258\\nown_goal       0\\npenalty        0\\ndtype: int64\"\r\n     },\r\n     \"execution_count\": 8,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"goals.isna().sum()\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-03-31T06:20:44.344956Z\",\r\n     \"end_time\": \"2023-03-31T06:20:44.505030Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 9,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"     scorer  minute\\n8012    NaN     NaN\\n8013    NaN     NaN\\n8014    NaN     NaN\\n8015    NaN     NaN\\n8016    NaN     NaN\\n8017    NaN     NaN\\n8018    NaN     NaN\\n8019    NaN     NaN\\n8020    NaN     NaN\\n8021    NaN     NaN\\n8022    NaN     NaN\\n8040    NaN     NaN\\n8041    NaN     NaN\\n8042    NaN     NaN\\n8043    NaN     NaN\\n8044    NaN     NaN\\n8045    NaN     NaN\\n8046    NaN     NaN\\n8059    NaN     NaN\\n8060    NaN     NaN\\n8061    NaN     NaN\\n8062    NaN     NaN\\n8063    NaN     NaN\\n8064    NaN     NaN\\n8065    NaN     NaN\\n8066    NaN     NaN\\n8067    NaN     NaN\\n8068    NaN     NaN\\n8069    NaN     NaN\\n8070    NaN     NaN\\n8071    NaN     NaN\\n8073    NaN     NaN\\n8074    NaN     NaN\\n8075    NaN     NaN\\n8076    NaN     NaN\\n8077    NaN     NaN\\n8078    NaN     NaN\\n8079    NaN     NaN\\n8080    NaN     NaN\\n8081    NaN     NaN\\n8082    NaN     NaN\\n8083    NaN     NaN\\n8084    NaN     NaN\\n8085    NaN     NaN\\n8086    NaN     NaN\\n8087    NaN     NaN\\n8088    NaN     NaN\\n8089    NaN     NaN\\n8293    NaN     NaN\",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>scorer</th>\\n      <th>minute</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>8012</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8013</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8014</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8015</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8016</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8017</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8018</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8019</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8020</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8021</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8022</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8040</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8041</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8042</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8043</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8044</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8045</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8046</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8059</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8060</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8061</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8062</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8063</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8064</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8065</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8066</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8067</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8068</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8069</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8070</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8071</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8073</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8074</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8075</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8076</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8077</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8078</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8079</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8080</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8081</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8082</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8083</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8084</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8085</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8086</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8087</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8088</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8089</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n    <tr>\\n      <th>8293</th>\\n      <td>NaN</td>\\n      <td>NaN</td>\\n    </tr>\\n  </tbody>\\n</table>\\n</div>\"\r\n     },\r\n     \"execution_count\": 9,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"temp = goals[['scorer', 'minute']]\\n\",\r\n    \"temp[temp['scorer'].isna()]   #to check if both columns intersect at missing values\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-03-31T06:20:44.384990Z\",\r\n     \"end_time\": \"2023-03-31T06:20:44.505030Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Clearly, the <i>scorer</i> and <i>minute</i> columns have missing values, whenever <i>scorer</i> is missing, <i>minute</i> also is missing.\\n\",\r\n    \"For once, we can go ahead and remove the respective rows but, I would want to lose as little data as possible because the dataset is already pretty small (just above 40k observations).\\n\",\r\n    \"\\n\",\r\n    \"So, here is what I decided to do -\\n\",\r\n    \"* Remove the rows with missing <i>scorer</i>, since these form merely 0.1 % of the dataset and it is impractical to set a dummy scorer name(that makes no sense, right?)\\n\",\r\n    \"* Keep the rows where we have a <i>scorer</i> but <i>minute</i> is missing. Missing <i>minute</i>s can then be replaced by the mode of the <i>minute</i>s, i.e. the minute in which most goals are usually scored. This will preserve information as well as accuracy.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 99,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"0\"\r\n     },\r\n     \"execution_count\": 99,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"goals = goals.dropna(subset='scorer')\\n\",\r\n    \"goals['scorer'].isna().sum()    #counting total NaN values in scorer\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-04-02T13:20:06.037872Z\",\r\n     \"end_time\": \"2023-04-02T13:20:06.100622Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 11,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stderr\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"C:\\\\Users\\\\thory\\\\AppData\\\\Local\\\\Temp\\\\ipykernel_76776\\\\2595038585.py:2: SettingWithCopyWarning: \\n\",\r\n      \"A value is trying to be set on a copy of a slice from a DataFrame.\\n\",\r\n      \"Try using .loc[row_indexer,col_indexer] = value instead\\n\",\r\n      \"\\n\",\r\n      \"See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\\n\",\r\n      \"  goals['minute'] = goals['minute'].fillna(mode_of_minute)\\n\"\r\n     ]\r\n    },\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"date         0\\nhome_team    0\\naway_team    0\\nteam         0\\nscorer       0\\nminute       0\\nown_goal     0\\npenalty      0\\ndtype: int64\"\r\n     },\r\n     \"execution_count\": 11,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"mode_of_minute = int(goals['minute'].mode())\\n\",\r\n    \"goals['minute'] = goals['minute'].fillna(mode_of_minute)\\n\",\r\n    \"goals.isna().sum()\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-03-31T06:20:44.434990Z\",\r\n     \"end_time\": \"2023-03-31T06:20:44.622574Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"So, we have got rid of all the null values in the dataset. Let us now merge matches and goals to create our new dataframe, <i>all_goals</i>\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 29,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"             date  home_team away_team  home_score  away_score  \\\\\\n0      1916-07-02      Chile   Uruguay           0           4   \\n1      1916-07-02      Chile   Uruguay           0           4   \\n2      1916-07-02      Chile   Uruguay           0           4   \\n3      1916-07-02      Chile   Uruguay           0           4   \\n4      1916-07-06  Argentina     Chile           6           1   \\n...           ...        ...       ...         ...         ...   \\n40954  2022-12-18  Argentina    France           3           3   \\n40955  2022-12-18  Argentina    France           3           3   \\n40956  2022-12-18  Argentina    France           3           3   \\n40957  2022-12-18  Argentina    France           3           3   \\n40958  2022-12-18  Argentina    France           3           3   \\n\\n           tournament          city    country  neutral       team  \\\\\\n0        Copa América  Buenos Aires  Argentina     True    Uruguay   \\n1        Copa América  Buenos Aires  Argentina     True    Uruguay   \\n2        Copa América  Buenos Aires  Argentina     True    Uruguay   \\n3        Copa América  Buenos Aires  Argentina     True    Uruguay   \\n4        Copa América  Buenos Aires  Argentina    False  Argentina   \\n...               ...           ...        ...      ...        ...   \\n40954  FIFA World Cup        Lusail      Qatar     True  Argentina   \\n40955  FIFA World Cup        Lusail      Qatar     True     France   \\n40956  FIFA World Cup        Lusail      Qatar     True     France   \\n40957  FIFA World Cup        Lusail      Qatar     True  Argentina   \\n40958  FIFA World Cup        Lusail      Qatar     True     France   \\n\\n                 scorer  minute  own_goal  penalty  \\n0       José Piendibene    44.0     False    False  \\n1      Isabelino Gradín    55.0     False    False  \\n2      Isabelino Gradín    70.0     False    False  \\n3       José Piendibene    75.0     False    False  \\n4         Alberto Ohaco     2.0     False    False  \\n...                 ...     ...       ...      ...  \\n40954    Ángel Di María    36.0     False    False  \\n40955     Kylian Mbappé    80.0     False     True  \\n40956     Kylian Mbappé    81.0     False    False  \\n40957      Lionel Messi   109.0     False    False  \\n40958     Kylian Mbappé   118.0     False     True  \\n\\n[40959 rows x 14 columns]\",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>date</th>\\n      <th>home_team</th>\\n      <th>away_team</th>\\n      <th>home_score</th>\\n      <th>away_score</th>\\n      <th>tournament</th>\\n      <th>city</th>\\n      <th>country</th>\\n      <th>neutral</th>\\n      <th>team</th>\\n      <th>scorer</th>\\n      <th>minute</th>\\n      <th>own_goal</th>\\n      <th>penalty</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>1916-07-02</td>\\n      <td>Chile</td>\\n      <td>Uruguay</td>\\n      <td>0</td>\\n      <td>4</td>\\n      <td>Copa América</td>\\n      <td>Buenos Aires</td>\\n      <td>Argentina</td>\\n      <td>True</td>\\n      <td>Uruguay</td>\\n      <td>José Piendibene</td>\\n      <td>44.0</td>\\n      <td>False</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>1916-07-02</td>\\n      <td>Chile</td>\\n      <td>Uruguay</td>\\n      <td>0</td>\\n      <td>4</td>\\n      <td>Copa América</td>\\n      <td>Buenos Aires</td>\\n      <td>Argentina</td>\\n      <td>True</td>\\n      <td>Uruguay</td>\\n      <td>Isabelino Gradín</td>\\n      <td>55.0</td>\\n      <td>False</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>1916-07-02</td>\\n      <td>Chile</td>\\n      <td>Uruguay</td>\\n      <td>0</td>\\n      <td>4</td>\\n      <td>Copa América</td>\\n      <td>Buenos Aires</td>\\n      <td>Argentina</td>\\n      <td>True</td>\\n      <td>Uruguay</td>\\n      <td>Isabelino Gradín</td>\\n      <td>70.0</td>\\n      <td>False</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>3</th>\\n      <td>1916-07-02</td>\\n      <td>Chile</td>\\n      <td>Uruguay</td>\\n      <td>0</td>\\n      <td>4</td>\\n      <td>Copa América</td>\\n      <td>Buenos Aires</td>\\n      <td>Argentina</td>\\n      <td>True</td>\\n      <td>Uruguay</td>\\n      <td>José Piendibene</td>\\n      <td>75.0</td>\\n      <td>False</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>4</th>\\n      <td>1916-07-06</td>\\n      <td>Argentina</td>\\n      <td>Chile</td>\\n      <td>6</td>\\n      <td>1</td>\\n      <td>Copa América</td>\\n      <td>Buenos Aires</td>\\n      <td>Argentina</td>\\n      <td>False</td>\\n      <td>Argentina</td>\\n      <td>Alberto Ohaco</td>\\n      <td>2.0</td>\\n      <td>False</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>...</th>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n    </tr>\\n    <tr>\\n      <th>40954</th>\\n      <td>2022-12-18</td>\\n      <td>Argentina</td>\\n      <td>France</td>\\n      <td>3</td>\\n      <td>3</td>\\n      <td>FIFA World Cup</td>\\n      <td>Lusail</td>\\n      <td>Qatar</td>\\n      <td>True</td>\\n      <td>Argentina</td>\\n      <td>Ángel Di María</td>\\n      <td>36.0</td>\\n      <td>False</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>40955</th>\\n      <td>2022-12-18</td>\\n      <td>Argentina</td>\\n      <td>France</td>\\n      <td>3</td>\\n      <td>3</td>\\n      <td>FIFA World Cup</td>\\n      <td>Lusail</td>\\n      <td>Qatar</td>\\n      <td>True</td>\\n      <td>France</td>\\n      <td>Kylian Mbappé</td>\\n      <td>80.0</td>\\n      <td>False</td>\\n      <td>True</td>\\n    </tr>\\n    <tr>\\n      <th>40956</th>\\n      <td>2022-12-18</td>\\n      <td>Argentina</td>\\n      <td>France</td>\\n      <td>3</td>\\n      <td>3</td>\\n      <td>FIFA World Cup</td>\\n      <td>Lusail</td>\\n      <td>Qatar</td>\\n      <td>True</td>\\n      <td>France</td>\\n      <td>Kylian Mbappé</td>\\n      <td>81.0</td>\\n      <td>False</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>40957</th>\\n      <td>2022-12-18</td>\\n      <td>Argentina</td>\\n      <td>France</td>\\n      <td>3</td>\\n      <td>3</td>\\n      <td>FIFA World Cup</td>\\n      <td>Lusail</td>\\n      <td>Qatar</td>\\n      <td>True</td>\\n      <td>Argentina</td>\\n      <td>Lionel Messi</td>\\n      <td>109.0</td>\\n      <td>False</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>40958</th>\\n      <td>2022-12-18</td>\\n      <td>Argentina</td>\\n      <td>France</td>\\n      <td>3</td>\\n      <td>3</td>\\n      <td>FIFA World Cup</td>\\n      <td>Lusail</td>\\n      <td>Qatar</td>\\n      <td>True</td>\\n      <td>France</td>\\n      <td>Kylian Mbappé</td>\\n      <td>118.0</td>\\n      <td>False</td>\\n      <td>True</td>\\n    </tr>\\n  </tbody>\\n</table>\\n<p>40959 rows × 14 columns</p>\\n</div>\"\r\n     },\r\n     \"execution_count\": 29,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"all_goals = matches.merge(right=goals, left_on=['date', 'home_team', 'away_team'], right_on=['date', 'home_team', 'away_team'], how='inner' )\\n\",\r\n    \"all_goals\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-03-31T06:43:51.010553Z\",\r\n     \"end_time\": \"2023-03-31T06:43:51.040600Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Since, the goals data in the given dataset for the years from 1872 to 1916 is not available but the match data is, I have decided not to delete the matches table because it still has some extra data that is nowhere else and might be useful later on.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 13,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Shape of matches: (44557, 9)\\n\",\r\n      \"Shape of goals: (40959, 8)\\n\",\r\n      \"Shape of all_goals: (40959, 14)\\n\",\r\n      \"Shape of penalties: (547, 4)\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"print('Shape of matches: {0}\\\\nShape of goals: {1}\\\\nShape of all_goals: {2}\\\\nShape of penalties: {3}'.format(matches.shape, goals.shape, all_goals.shape, penalties.shape))\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-03-31T06:20:44.552055Z\",\r\n     \"end_time\": \"2023-03-31T06:20:44.662092Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Clearly, the shapes are consistent and accurate. Let us begin exploratory analysis now, but before that let me just tweak around our <i>all_goals</i> dataframe to see if I can find something more interesting..\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 25,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"         home_score    away_score        minute\\ncount  40959.000000  40959.000000  40959.000000\\nmean       2.642472      1.582924     50.223174\\nstd        2.462098      1.712146     26.447382\\nmin        0.000000      0.000000      1.000000\\n25%        1.000000      0.000000     28.000000\\n50%        2.000000      1.000000     51.000000\\n75%        4.000000      2.000000     73.000000\\nmax       31.000000     17.000000    122.000000\",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>home_score</th>\\n      <th>away_score</th>\\n      <th>minute</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>count</th>\\n      <td>40959.000000</td>\\n      <td>40959.000000</td>\\n      <td>40959.000000</td>\\n    </tr>\\n    <tr>\\n      <th>mean</th>\\n      <td>2.642472</td>\\n      <td>1.582924</td>\\n      <td>50.223174</td>\\n    </tr>\\n    <tr>\\n      <th>std</th>\\n      <td>2.462098</td>\\n      <td>1.712146</td>\\n      <td>26.447382</td>\\n    </tr>\\n    <tr>\\n      <th>min</th>\\n      <td>0.000000</td>\\n      <td>0.000000</td>\\n      <td>1.000000</td>\\n    </tr>\\n    <tr>\\n      <th>25%</th>\\n      <td>1.000000</td>\\n      <td>0.000000</td>\\n      <td>28.000000</td>\\n    </tr>\\n    <tr>\\n      <th>50%</th>\\n      <td>2.000000</td>\\n      <td>1.000000</td>\\n      <td>51.000000</td>\\n    </tr>\\n    <tr>\\n      <th>75%</th>\\n      <td>4.000000</td>\\n      <td>2.000000</td>\\n      <td>73.000000</td>\\n    </tr>\\n    <tr>\\n      <th>max</th>\\n      <td>31.000000</td>\\n      <td>17.000000</td>\\n      <td>122.000000</td>\\n    </tr>\\n  </tbody>\\n</table>\\n</div>\"\r\n     },\r\n     \"execution_count\": 25,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"all_goals.describe()\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-03-31T06:37:49.913409Z\",\r\n     \"end_time\": \"2023-03-31T06:37:49.943622Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"By looking at the dataset, any football enthusiast would first want to look at the distribution of the goals against minutes. Thus, let's look at it -\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 28,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"<Figure size 640x480 with 1 Axes>\",\r\n      \"image/png\": \"\"\r\n     },\r\n     \"metadata\": {},\r\n     \"output_type\": \"display_data\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"ax = sns.kdeplot(data=all_goals, x='minute',fill=True, cumulative=False)\\n\",\r\n    \"ax.axvline(all_goals['minute'].mean(), color='g', label='mean')\\n\",\r\n    \"ax.axvline(all_goals['minute'].median(), color='r', label='median')\\n\",\r\n    \"ax.legend()\\n\",\r\n    \"plt.xlabel('Minute')\\n\",\r\n    \"plt.ylabel('Density')\\n\",\r\n    \"plt.savefig('figures/minute_v_allgoals.jpg')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-04-01T16:26:52.001400Z\",\r\n     \"end_time\": \"2023-04-01T16:26:53.184812Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"1. Most number of goals are scored in the 90th minute, which might look surprising at first, but it is not - stay tuned to see why.\\n\",\r\n    \"2. The median and mean stick around 50, which simply makes sense according to basic laws of probability.\\n\",\r\n    \"\\n\",\r\n    \"I also want to visualize the home and away score against minutes, but that would require a new column which signifies that a goal has been scored by home team or away team.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"We have created two boolean columns, ``home_goal`` will have value 1 if the home team has scored that goal(remember that each row is a goal), otherwise 0. Similarly, reverse for the ``away_goal`` column\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 48,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"       minute  home_team away_team  home_goal  away_goal\\n0        44.0      Chile   Uruguay          0          1\\n1        55.0      Chile   Uruguay          0          1\\n2        70.0      Chile   Uruguay          0          1\\n3        75.0      Chile   Uruguay          0          1\\n4         2.0  Argentina     Chile          1          0\\n...       ...        ...       ...        ...        ...\\n40954    36.0  Argentina    France          1          0\\n40955    80.0  Argentina    France          0          1\\n40956    81.0  Argentina    France          0          1\\n40957   109.0  Argentina    France          1          0\\n40958   118.0  Argentina    France          0          1\\n\\n[40959 rows x 5 columns]\",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>minute</th>\\n      <th>home_team</th>\\n      <th>away_team</th>\\n      <th>home_goal</th>\\n      <th>away_goal</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>44.0</td>\\n      <td>Chile</td>\\n      <td>Uruguay</td>\\n      <td>0</td>\\n      <td>1</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>55.0</td>\\n      <td>Chile</td>\\n      <td>Uruguay</td>\\n      <td>0</td>\\n      <td>1</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>70.0</td>\\n      <td>Chile</td>\\n      <td>Uruguay</td>\\n      <td>0</td>\\n      <td>1</td>\\n    </tr>\\n    <tr>\\n      <th>3</th>\\n      <td>75.0</td>\\n      <td>Chile</td>\\n      <td>Uruguay</td>\\n      <td>0</td>\\n      <td>1</td>\\n    </tr>\\n    <tr>\\n      <th>4</th>\\n      <td>2.0</td>\\n      <td>Argentina</td>\\n      <td>Chile</td>\\n      <td>1</td>\\n      <td>0</td>\\n    </tr>\\n    <tr>\\n      <th>...</th>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n    </tr>\\n    <tr>\\n      <th>40954</th>\\n      <td>36.0</td>\\n      <td>Argentina</td>\\n      <td>France</td>\\n      <td>1</td>\\n      <td>0</td>\\n    </tr>\\n    <tr>\\n      <th>40955</th>\\n      <td>80.0</td>\\n      <td>Argentina</td>\\n      <td>France</td>\\n      <td>0</td>\\n      <td>1</td>\\n    </tr>\\n    <tr>\\n      <th>40956</th>\\n      <td>81.0</td>\\n      <td>Argentina</td>\\n      <td>France</td>\\n      <td>0</td>\\n      <td>1</td>\\n    </tr>\\n    <tr>\\n      <th>40957</th>\\n      <td>109.0</td>\\n      <td>Argentina</td>\\n      <td>France</td>\\n      <td>1</td>\\n      <td>0</td>\\n    </tr>\\n    <tr>\\n      <th>40958</th>\\n      <td>118.0</td>\\n      <td>Argentina</td>\\n      <td>France</td>\\n      <td>0</td>\\n      <td>1</td>\\n    </tr>\\n  </tbody>\\n</table>\\n<p>40959 rows × 5 columns</p>\\n</div>\"\r\n     },\r\n     \"execution_count\": 48,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"all_goals['home_goal'] = all_goals.apply(lambda row: 1 if row['home_team']==row['team'] else 0, axis=1)\\n\",\r\n    \"all_goals['away_goal'] = all_goals.apply(lambda row: 1 if row['away_team']==row['team'] else 0, axis=1)\\n\",\r\n    \"minute_v_goal = all_goals.loc[:, ['minute', 'home_team', 'away_team', 'home_goal', 'away_goal']]\\n\",\r\n    \"minute_v_goal\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-03-31T07:07:02.307622Z\",\r\n     \"end_time\": \"2023-03-31T07:07:02.337621Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"In the following cell, I have grouped ``minute`` against ``home_goal`` and ``away_goal`` so that I can construct a graph of minutes against total goals in that minute.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 50,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"        home_goal  away_goal\\nminute                      \\n1.0           116         72\\n2.0           206        117\\n3.0           186        110\\n4.0           208        116\\n5.0           201        164\\n...           ...        ...\\n117.0           5          2\\n118.0           7          2\\n119.0           6          2\\n120.0           4          7\\n122.0           1          0\\n\\n[121 rows x 2 columns]\",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>home_goal</th>\\n      <th>away_goal</th>\\n    </tr>\\n    <tr>\\n      <th>minute</th>\\n      <th></th>\\n      <th></th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>1.0</th>\\n      <td>116</td>\\n      <td>72</td>\\n    </tr>\\n    <tr>\\n      <th>2.0</th>\\n      <td>206</td>\\n      <td>117</td>\\n    </tr>\\n    <tr>\\n      <th>3.0</th>\\n      <td>186</td>\\n      <td>110</td>\\n    </tr>\\n    <tr>\\n      <th>4.0</th>\\n      <td>208</td>\\n      <td>116</td>\\n    </tr>\\n    <tr>\\n      <th>5.0</th>\\n      <td>201</td>\\n      <td>164</td>\\n    </tr>\\n    <tr>\\n      <th>...</th>\\n      <td>...</td>\\n      <td>...</td>\\n    </tr>\\n    <tr>\\n      <th>117.0</th>\\n      <td>5</td>\\n      <td>2</td>\\n    </tr>\\n    <tr>\\n      <th>118.0</th>\\n      <td>7</td>\\n      <td>2</td>\\n    </tr>\\n    <tr>\\n      <th>119.0</th>\\n      <td>6</td>\\n      <td>2</td>\\n    </tr>\\n    <tr>\\n      <th>120.0</th>\\n      <td>4</td>\\n      <td>7</td>\\n    </tr>\\n    <tr>\\n      <th>122.0</th>\\n      <td>1</td>\\n      <td>0</td>\\n    </tr>\\n  </tbody>\\n</table>\\n<p>121 rows × 2 columns</p>\\n</div>\"\r\n     },\r\n     \"execution_count\": 50,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"minute_v_goal = minute_v_goal.groupby('minute').sum(numeric_only=True)\\n\",\r\n    \"minute_v_goal\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-03-31T07:09:03.360215Z\",\r\n     \"end_time\": \"2023-03-31T07:09:03.381443Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 25,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"<Figure size 640x480 with 1 Axes>\",\r\n      \"image/png\": \"\"\r\n     },\r\n     \"metadata\": {},\r\n     \"output_type\": \"display_data\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"ax2 = sns.lineplot(data=minute_v_goal, x='minute', y='home_goal', color='g', label='Home Goals')\\n\",\r\n    \"sns.lineplot(data=minute_v_goal, x='minute', y='away_goal', color='r', ax=ax2, label='Away Goals')\\n\",\r\n    \"plt.xlabel('Minute')\\n\",\r\n    \"plt.ylabel('Total Goals')\\n\",\r\n    \"plt.savefig('figures/minute_v_home_away.jpg')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-04-01T16:22:00.931203Z\",\r\n     \"end_time\": \"2023-04-01T16:22:01.429602Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"It is very surprising to see how similar the distribution of both of these curves is. Let us break down this curve:\\n\",\r\n    \" * The flat tail after 90 minutes is pretty much obvious, because very less number of games go into the extra time.\\n\",\r\n    \" * Most number of goals are scored at the end of both halves. This looks surprising at first but this onl makes sense because of **injury time**. Injury time might last for anywhere between 0 to 10 minutes or even longer, hence the 90th or the 45th minutes are effectively many times longer than a minute, hence more probability of scoring goals during those minutes.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Lastly, one last column to add before we move on to the interesting stuff - the weekday column.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 60,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"            date   weekday\\n0     1916-07-02    Sunday\\n1     1916-07-02    Sunday\\n2     1916-07-02    Sunday\\n3     1916-07-02    Sunday\\n4     1916-07-06  Thursday\\n...          ...       ...\\n40954 2022-12-18    Sunday\\n40955 2022-12-18    Sunday\\n40956 2022-12-18    Sunday\\n40957 2022-12-18    Sunday\\n40958 2022-12-18    Sunday\\n\\n[40959 rows x 2 columns]\",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>date</th>\\n      <th>weekday</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>1916-07-02</td>\\n      <td>Sunday</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>1916-07-02</td>\\n      <td>Sunday</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>1916-07-02</td>\\n      <td>Sunday</td>\\n    </tr>\\n    <tr>\\n      <th>3</th>\\n      <td>1916-07-02</td>\\n      <td>Sunday</td>\\n    </tr>\\n    <tr>\\n      <th>4</th>\\n      <td>1916-07-06</td>\\n      <td>Thursday</td>\\n    </tr>\\n    <tr>\\n      <th>...</th>\\n      <td>...</td>\\n      <td>...</td>\\n    </tr>\\n    <tr>\\n      <th>40954</th>\\n      <td>2022-12-18</td>\\n      <td>Sunday</td>\\n    </tr>\\n    <tr>\\n      <th>40955</th>\\n      <td>2022-12-18</td>\\n      <td>Sunday</td>\\n    </tr>\\n    <tr>\\n      <th>40956</th>\\n      <td>2022-12-18</td>\\n      <td>Sunday</td>\\n    </tr>\\n    <tr>\\n      <th>40957</th>\\n      <td>2022-12-18</td>\\n      <td>Sunday</td>\\n    </tr>\\n    <tr>\\n      <th>40958</th>\\n      <td>2022-12-18</td>\\n      <td>Sunday</td>\\n    </tr>\\n  </tbody>\\n</table>\\n<p>40959 rows × 2 columns</p>\\n</div>\"\r\n     },\r\n     \"execution_count\": 60,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"all_goals['date'] = pd.to_datetime(all_goals['date'])\\n\",\r\n    \"all_goals['weekday'] = all_goals['date'].dt.day_name()      #extract day name from date\\n\",\r\n    \"all_goals[['date','weekday']]\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-03-31T07:28:03.212865Z\",\r\n     \"end_time\": \"2023-03-31T07:28:03.259775Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"As you might argue, it would make more sense to create this column in the <i>matches</i> table instead of <i>all_goals</i>. But, I want to use only <i>all_goals</i> for all the further tasks and forget the <i>matches</i> table altogether. It has done its job ;)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Let us now create a subset containing only numeric columns. Before proceeding, I would want to convert the ``neutral``,  ``own_goal`` and ``penalty`` columns into numeric because they are boolean and might be more efficiently used in numeric form\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 21,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"dtype('int32')\"\r\n     },\r\n     \"execution_count\": 21,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"all_goals.loc[:, 'penalty'] = all_goals['penalty'].astype(int)\\n\",\r\n    \"all_goals.loc[:, 'own_goal'] = all_goals['own_goal'].astype(int)\\n\",\r\n    \"all_goals.loc[:, 'neutral'] = all_goals['neutral'].astype(int)\\n\",\r\n    \"all_goals['penalty'].dtype\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-04-01T16:15:09.583425Z\",\r\n     \"end_time\": \"2023-04-01T16:15:09.634905Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 22,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"        date  neutral  home_score  away_score  penalty  own_goal  home_goal  \\\\\\n0 1916-07-02        1           0           4        0         0          0   \\n1 1916-07-02        1           0           4        0         0          0   \\n2 1916-07-02        1           0           4        0         0          0   \\n3 1916-07-02        1           0           4        0         0          0   \\n4 1916-07-06        0           6           1        0         0          1   \\n\\n   away_goal  \\n0          1  \\n1          1  \\n2          1  \\n3          1  \\n4          0  \",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>date</th>\\n      <th>neutral</th>\\n      <th>home_score</th>\\n      <th>away_score</th>\\n      <th>penalty</th>\\n      <th>own_goal</th>\\n      <th>home_goal</th>\\n      <th>away_goal</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>1916-07-02</td>\\n      <td>1</td>\\n      <td>0</td>\\n      <td>4</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>1</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>1916-07-02</td>\\n      <td>1</td>\\n      <td>0</td>\\n      <td>4</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>1</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>1916-07-02</td>\\n      <td>1</td>\\n      <td>0</td>\\n      <td>4</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>1</td>\\n    </tr>\\n    <tr>\\n      <th>3</th>\\n      <td>1916-07-02</td>\\n      <td>1</td>\\n      <td>0</td>\\n      <td>4</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>1</td>\\n    </tr>\\n    <tr>\\n      <th>4</th>\\n      <td>1916-07-06</td>\\n      <td>0</td>\\n      <td>6</td>\\n      <td>1</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>1</td>\\n      <td>0</td>\\n    </tr>\\n  </tbody>\\n</table>\\n</div>\"\r\n     },\r\n     \"execution_count\": 22,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"num_cols = all_goals.loc[:, ['date', 'neutral', 'home_score', 'away_score', 'penalty', 'own_goal', 'home_goal', 'away_goal']]\\n\",\r\n    \"num_cols.head()\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-04-01T16:16:29.913743Z\",\r\n     \"end_time\": \"2023-04-01T16:16:30.013037Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"**Brief summary of the major insights through numeric columns:**\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 51,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Total Home Goals: 24783\\n\",\r\n      \"Total Away Goals: 16176\\n\",\r\n      \"Total Penalties(in match, not shoot-out): 2685\\n\",\r\n      \"Average Goals per match: 1.458839239625648\\n\",\r\n      \"Highest number of Goals in a match: 31\\n\",\r\n      \"Highest number of Penalties in a match: 13 (!!!CRAZYY!! NO?)\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"to_print = {'home_goals': num_cols['home_goal'].sum(),\\n\",\r\n    \"            'away_goals': num_cols['away_goal'].sum(),\\n\",\r\n    \"            'penalties': num_cols['penalty'].sum(),\\n\",\r\n    \"            'ave_goals': np.mean([matches['home_score'], matches['away_score']]),\\n\",\r\n    \"            'max_goals': np.max([matches['home_score'].max(), matches['away_score'].max()]),\\n\",\r\n    \"            'max_penal': np.max(num_cols.groupby('date')['penalty'].sum())}\\n\",\r\n    \"\\n\",\r\n    \"print('Total Home Goals: {home_goals}\\\\n'\\n\",\r\n    \"      'Total Away Goals: {away_goals}\\\\n'\\n\",\r\n    \"      'Total Penalties(in match, not shoot-out): {penalties}\\\\n'\\n\",\r\n    \"      'Average Goals per match: {ave_goals}\\\\n'\\n\",\r\n    \"      'Highest number of Goals in a match: {max_goals}\\\\n'\\n\",\r\n    \"      'Highest number of Penalties in a match: {max_penal} (!!!CRAZYY!! NO?)'.format(**to_print))\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-04-01T16:47:57.319227Z\",\r\n     \"end_time\": \"2023-04-01T16:47:57.336007Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 56,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"            neutral    home_score    away_score       penalty      own_goal  \\\\\\ncount  40959.000000  40959.000000  40959.000000  40959.000000  40959.000000   \\nmean       0.255426      2.642472      1.582924      0.065553      0.017530   \\nstd        0.436106      2.462098      1.712146      0.247503      0.131236   \\nmin        0.000000      0.000000      0.000000      0.000000      0.000000   \\n25%        0.000000      1.000000      0.000000      0.000000      0.000000   \\n50%        0.000000      2.000000      1.000000      0.000000      0.000000   \\n75%        1.000000      4.000000      2.000000      0.000000      0.000000   \\nmax        1.000000     31.000000     17.000000      1.000000      1.000000   \\n\\n          home_goal     away_goal  \\ncount  40959.000000  40959.000000  \\nmean       0.605068      0.394932  \\nstd        0.488842      0.488842  \\nmin        0.000000      0.000000  \\n25%        0.000000      0.000000  \\n50%        1.000000      0.000000  \\n75%        1.000000      1.000000  \\nmax        1.000000      1.000000  \",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>neutral</th>\\n      <th>home_score</th>\\n      <th>away_score</th>\\n      <th>penalty</th>\\n      <th>own_goal</th>\\n      <th>home_goal</th>\\n      <th>away_goal</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>count</th>\\n      <td>40959.000000</td>\\n      <td>40959.000000</td>\\n      <td>40959.000000</td>\\n      <td>40959.000000</td>\\n      <td>40959.000000</td>\\n      <td>40959.000000</td>\\n      <td>40959.000000</td>\\n    </tr>\\n    <tr>\\n      <th>mean</th>\\n      <td>0.255426</td>\\n      <td>2.642472</td>\\n      <td>1.582924</td>\\n      <td>0.065553</td>\\n      <td>0.017530</td>\\n      <td>0.605068</td>\\n      <td>0.394932</td>\\n    </tr>\\n    <tr>\\n      <th>std</th>\\n      <td>0.436106</td>\\n      <td>2.462098</td>\\n      <td>1.712146</td>\\n      <td>0.247503</td>\\n      <td>0.131236</td>\\n      <td>0.488842</td>\\n      <td>0.488842</td>\\n    </tr>\\n    <tr>\\n      <th>min</th>\\n      <td>0.000000</td>\\n      <td>0.000000</td>\\n      <td>0.000000</td>\\n      <td>0.000000</td>\\n      <td>0.000000</td>\\n      <td>0.000000</td>\\n      <td>0.000000</td>\\n    </tr>\\n    <tr>\\n      <th>25%</th>\\n      <td>0.000000</td>\\n      <td>1.000000</td>\\n      <td>0.000000</td>\\n      <td>0.000000</td>\\n      <td>0.000000</td>\\n      <td>0.000000</td>\\n      <td>0.000000</td>\\n    </tr>\\n    <tr>\\n      <th>50%</th>\\n      <td>0.000000</td>\\n      <td>2.000000</td>\\n      <td>1.000000</td>\\n      <td>0.000000</td>\\n      <td>0.000000</td>\\n      <td>1.000000</td>\\n      <td>0.000000</td>\\n    </tr>\\n    <tr>\\n      <th>75%</th>\\n      <td>1.000000</td>\\n      <td>4.000000</td>\\n      <td>2.000000</td>\\n      <td>0.000000</td>\\n      <td>0.000000</td>\\n      <td>1.000000</td>\\n      <td>1.000000</td>\\n    </tr>\\n    <tr>\\n      <th>max</th>\\n      <td>1.000000</td>\\n      <td>31.000000</td>\\n      <td>17.000000</td>\\n      <td>1.000000</td>\\n      <td>1.000000</td>\\n      <td>1.000000</td>\\n      <td>1.000000</td>\\n    </tr>\\n  </tbody>\\n</table>\\n</div>\"\r\n     },\r\n     \"metadata\": {},\r\n     \"output_type\": \"display_data\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"from IPython.display import display\\n\",\r\n    \"\\n\",\r\n    \"display(num_cols.describe())\\n\",\r\n    \"\\n\",\r\n    \"#the above code was needed because my IDE was not displaying tables without a print statement for some reason.\\n\",\r\n    \"#this will not be needed on you device most likely, the following code should work\\n\",\r\n    \"\\n\",\r\n    \"#num_cols.describe()\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-04-01T16:51:24.750207Z\",\r\n     \"end_time\": \"2023-04-01T16:51:24.796889Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Now, let us have a look at the distributions of some major fields.\\n\",\r\n    \"Here are some histograms(or density plots) below, which I think were important.\\n\",\r\n    \"1. ``home_score`` and ``away_score`` from the ``matches`` table.\\n\",\r\n    \"2. ``penalty`` and ``own_goal`` from the ``num_cols`` table.\\n\",\r\n    \"3. Kernel Density plot of sum of ``home_goal`` and sum of ``penalty`` grouped by ``['date', 'home_team', 'away_team']`` ( this combination means one match)\\n\",\r\n    \"4. Kernel Density plot of sum of ``away_goal`` and sum of ``own_goal`` grouped by ``['date', 'home_team', 'away_team']``\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 65,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"<Figure size 640x480 with 1 Axes>\",\r\n      \"image/png\": \"\"\r\n     },\r\n     \"metadata\": {},\r\n     \"output_type\": \"display_data\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"#1\\n\",\r\n    \"\\n\",\r\n    \"ax3 = sns.histplot(data=matches, x='home_score', color='g', label='Home Goals', binwidth=1)\\n\",\r\n    \"sns.histplot(data=matches, x='away_score', color='r', label='Away Goals', binwidth=1)\\n\",\r\n    \"plt.ylabel('Frequency')\\n\",\r\n    \"plt.xlabel('Goals')\\n\",\r\n    \"plt.xlim(0, 10)\\n\",\r\n    \"plt.legend()\\n\",\r\n    \"plt.savefig('figures/score_histo.jpg')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-04-02T10:53:23.256516Z\",\r\n     \"end_time\": \"2023-04-02T10:53:24.040649Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": null,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"#2\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Finally, let's begin the interesting stuff.\\n\",\r\n    \"The first question that strikes my mind while performing any sports analysis task is looking for the top players. Let us find out who are some of the best players in international football.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 91,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"                  neutral  minute  own_goal  penalty  home_goal  away_goal  \\\\\\nscorer                                                                       \\nA'ala Hubail            5   717.0         0        1         10          3   \\nA. Elangovan            0    42.0         0        0          1          0   \\nAage Rou Jensen         0    85.0         0        0          0          1   \\nAaran Lines             1   170.0         0        0          3          0   \\nAaron Boupendza         1    16.0         0        0          0          1   \\n...                   ...     ...       ...      ...        ...        ...   \\nŽarko Tomašević         0   233.0         0        0          3          1   \\nŽeljko Milinovič        1    47.0         0        0          0          2   \\nŽeljko Čajkovski        3   369.0         0        0          2          4   \\nȘtefan Dobay            3   292.0         0        0          1          4   \\nȘtefan Iovan            0   162.0         0        0          2          1   \\n\\n                  total_goals  \\nscorer                         \\nA'ala Hubail               13  \\nA. Elangovan                1  \\nAage Rou Jensen             1  \\nAaran Lines                 3  \\nAaron Boupendza             1  \\n...                       ...  \\nŽarko Tomašević             4  \\nŽeljko Milinovič            2  \\nŽeljko Čajkovski            6  \\nȘtefan Dobay                5  \\nȘtefan Iovan                3  \\n\\n[13376 rows x 7 columns]\",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>neutral</th>\\n      <th>minute</th>\\n      <th>own_goal</th>\\n      <th>penalty</th>\\n      <th>home_goal</th>\\n      <th>away_goal</th>\\n      <th>total_goals</th>\\n    </tr>\\n    <tr>\\n      <th>scorer</th>\\n      <th></th>\\n      <th></th>\\n      <th></th>\\n      <th></th>\\n      <th></th>\\n      <th></th>\\n      <th></th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>A'ala Hubail</th>\\n      <td>5</td>\\n      <td>717.0</td>\\n      <td>0</td>\\n      <td>1</td>\\n      <td>10</td>\\n      <td>3</td>\\n      <td>13</td>\\n    </tr>\\n    <tr>\\n      <th>A. Elangovan</th>\\n      <td>0</td>\\n      <td>42.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>1</td>\\n      <td>0</td>\\n      <td>1</td>\\n    </tr>\\n    <tr>\\n      <th>Aage Rou Jensen</th>\\n      <td>0</td>\\n      <td>85.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>1</td>\\n      <td>1</td>\\n    </tr>\\n    <tr>\\n      <th>Aaran Lines</th>\\n      <td>1</td>\\n      <td>170.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>0</td>\\n      <td>3</td>\\n    </tr>\\n    <tr>\\n      <th>Aaron Boupendza</th>\\n      <td>1</td>\\n      <td>16.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>1</td>\\n      <td>1</td>\\n    </tr>\\n    <tr>\\n      <th>...</th>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n    </tr>\\n    <tr>\\n      <th>Žarko Tomašević</th>\\n      <td>0</td>\\n      <td>233.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>1</td>\\n      <td>4</td>\\n    </tr>\\n    <tr>\\n      <th>Željko Milinovič</th>\\n      <td>1</td>\\n      <td>47.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>2</td>\\n      <td>2</td>\\n    </tr>\\n    <tr>\\n      <th>Željko Čajkovski</th>\\n      <td>3</td>\\n      <td>369.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>2</td>\\n      <td>4</td>\\n      <td>6</td>\\n    </tr>\\n    <tr>\\n      <th>Ștefan Dobay</th>\\n      <td>3</td>\\n      <td>292.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>1</td>\\n      <td>4</td>\\n      <td>5</td>\\n    </tr>\\n    <tr>\\n      <th>Ștefan Iovan</th>\\n      <td>0</td>\\n      <td>162.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>2</td>\\n      <td>1</td>\\n      <td>3</td>\\n    </tr>\\n  </tbody>\\n</table>\\n<p>13376 rows × 7 columns</p>\\n</div>\"\r\n     },\r\n     \"metadata\": {},\r\n     \"output_type\": \"display_data\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"grouped_by_players = all_goals.groupby('scorer').sum(numeric_only=True)\\n\",\r\n    \"grouped_by_players = grouped_by_players.drop(['home_score', 'away_score'], axis=1)       #sum of final scores is irrelevant for player data\\n\",\r\n    \"grouped_by_players['total_goals'] = grouped_by_players['home_goal']+grouped_by_players['away_goal']\\n\",\r\n    \"display(grouped_by_players)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-04-02T11:54:15.771222Z\",\r\n     \"end_time\": \"2023-04-02T11:54:15.831048Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Let's also add another column to this new dataframe - players' countries\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 130,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"#extracting players and teams and dropping duplicates while also sorting values alphabetically so that this can be merged with the grouped_by_players dataframe\\n\",\r\n    \"nation = all_goals[['scorer', 'home_team']].drop_duplicates(subset='scorer').sort_values(by='scorer').set_index('scorer')\\n\",\r\n    \"\\n\",\r\n    \"#appending this series to grouped_by_players\\n\",\r\n    \"grouped_by_players['nation'] = nation\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-04-02T14:14:07.743594Z\",\r\n     \"end_time\": \"2023-04-02T14:14:07.794159Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Extracting the top 10 players by total goals scored in international matches from this prepared data\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 131,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"                    neutral  minute  own_goal  penalty  home_goal  away_goal  \\\\\\nscorer                                                                         \\nCristiano Ronaldo        18  4901.0         0       16         50         41   \\nRobert Lewandowski        9  2838.0         0       11         29         27   \\nLionel Messi             25  2475.0         0       14         39         15   \\nAli Daei                 23  2776.0         0        8         26         23   \\nMiroslav Klose           13  2316.0         0        0         29         19   \\nCarlos Ruiz              10  2115.0         0        4         32         15   \\nLuis Suárez              16  2414.0         0        9         28         18   \\nZlatan Ibrahimović        5  2364.0         0        5         26         18   \\nHarry Kane               10  2228.0         0       13         23         21   \\nRobbie Keane              5  1935.0         0       10         28         16   \\n\\n                    total_goals               nation  \\nscorer                                                \\nCristiano Ronaldo            91             Portugal  \\nRobert Lewandowski           56           San Marino  \\nLionel Messi                 54            Argentina  \\nAli Daei                     49                 Iran  \\nMiroslav Klose               48              Germany  \\nCarlos Ruiz                  47            Guatemala  \\nLuis Suárez                  46              Uruguay  \\nZlatan Ibrahimović           44               Sweden  \\nHarry Kane                   44              England  \\nRobbie Keane                 44  Republic of Ireland  \",\r\n      \"text/html\": \"<div>\\n<style scoped>\\n    .dataframe tbody tr th:only-of-type {\\n        vertical-align: middle;\\n    }\\n\\n    .dataframe tbody tr th {\\n        vertical-align: top;\\n    }\\n\\n    .dataframe thead th {\\n        text-align: right;\\n    }\\n</style>\\n<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n  <thead>\\n    <tr style=\\\"text-align: right;\\\">\\n      <th></th>\\n      <th>neutral</th>\\n      <th>minute</th>\\n      <th>own_goal</th>\\n      <th>penalty</th>\\n      <th>home_goal</th>\\n      <th>away_goal</th>\\n      <th>total_goals</th>\\n      <th>nation</th>\\n    </tr>\\n    <tr>\\n      <th>scorer</th>\\n      <th></th>\\n      <th></th>\\n      <th></th>\\n      <th></th>\\n      <th></th>\\n      <th></th>\\n      <th></th>\\n      <th></th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>Cristiano Ronaldo</th>\\n      <td>18</td>\\n      <td>4901.0</td>\\n      <td>0</td>\\n      <td>16</td>\\n      <td>50</td>\\n      <td>41</td>\\n      <td>91</td>\\n      <td>Portugal</td>\\n    </tr>\\n    <tr>\\n      <th>Robert Lewandowski</th>\\n      <td>9</td>\\n      <td>2838.0</td>\\n      <td>0</td>\\n      <td>11</td>\\n      <td>29</td>\\n      <td>27</td>\\n      <td>56</td>\\n      <td>San Marino</td>\\n    </tr>\\n    <tr>\\n      <th>Lionel Messi</th>\\n      <td>25</td>\\n      <td>2475.0</td>\\n      <td>0</td>\\n      <td>14</td>\\n      <td>39</td>\\n      <td>15</td>\\n      <td>54</td>\\n      <td>Argentina</td>\\n    </tr>\\n    <tr>\\n      <th>Ali Daei</th>\\n      <td>23</td>\\n      <td>2776.0</td>\\n      <td>0</td>\\n      <td>8</td>\\n      <td>26</td>\\n      <td>23</td>\\n      <td>49</td>\\n      <td>Iran</td>\\n    </tr>\\n    <tr>\\n      <th>Miroslav Klose</th>\\n      <td>13</td>\\n      <td>2316.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>29</td>\\n      <td>19</td>\\n      <td>48</td>\\n      <td>Germany</td>\\n    </tr>\\n    <tr>\\n      <th>Carlos Ruiz</th>\\n      <td>10</td>\\n      <td>2115.0</td>\\n      <td>0</td>\\n      <td>4</td>\\n      <td>32</td>\\n      <td>15</td>\\n      <td>47</td>\\n      <td>Guatemala</td>\\n    </tr>\\n    <tr>\\n      <th>Luis Suárez</th>\\n      <td>16</td>\\n      <td>2414.0</td>\\n      <td>0</td>\\n      <td>9</td>\\n      <td>28</td>\\n      <td>18</td>\\n      <td>46</td>\\n      <td>Uruguay</td>\\n    </tr>\\n    <tr>\\n      <th>Zlatan Ibrahimović</th>\\n      <td>5</td>\\n      <td>2364.0</td>\\n      <td>0</td>\\n      <td>5</td>\\n      <td>26</td>\\n      <td>18</td>\\n      <td>44</td>\\n      <td>Sweden</td>\\n    </tr>\\n    <tr>\\n      <th>Harry Kane</th>\\n      <td>10</td>\\n      <td>2228.0</td>\\n      <td>0</td>\\n      <td>13</td>\\n      <td>23</td>\\n      <td>21</td>\\n      <td>44</td>\\n      <td>England</td>\\n    </tr>\\n    <tr>\\n      <th>Robbie Keane</th>\\n      <td>5</td>\\n      <td>1935.0</td>\\n      <td>0</td>\\n      <td>10</td>\\n      <td>28</td>\\n      <td>16</td>\\n      <td>44</td>\\n      <td>Republic of Ireland</td>\\n    </tr>\\n  </tbody>\\n</table>\\n</div>\"\r\n     },\r\n     \"metadata\": {},\r\n     \"output_type\": \"display_data\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"top_10_players = grouped_by_players.sort_values(by='total_goals', ascending=False).head(10)\\n\",\r\n    \"display(top_10_players)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-04-02T14:14:48.141399Z\",\r\n     \"end_time\": \"2023-04-02T14:14:48.173874Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 137,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"<Figure size 1000x700 with 1 Axes>\",\r\n      \"image/png\": \"\"\r\n     },\r\n     \"metadata\": {},\r\n     \"output_type\": \"display_data\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"fig = plt.figure(figsize=(10,7))\\n\",\r\n    \"ax5 = sns.scatterplot(data=top_10_players, x='scorer', y='total_goals', size='penalty', sizes=(50, 300), hue='nation')\\n\",\r\n    \"plt.xticks(rotation=45)\\n\",\r\n    \"plt.legend(loc='best')\\n\",\r\n    \"plt.xlabel('Player')\\n\",\r\n    \"plt.ylabel('Total Goals')\\n\",\r\n    \"\\n\",\r\n    \"plt.savefig('figures/top_10_players.jpg')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-04-02T14:18:11.183149Z\",\r\n     \"end_time\": \"2023-04-02T14:18:12.593731Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"Clearly, **Cristiano Ronaldo** appears to be far ahead of his competitors in total number of goals as penalties (as per this dataset, which is not very accurate).\\n\",\r\n    \"On the other hand, **Lionel Messi**, despite his reputation and stunning performances for club, is far behind Ronaldo in international matches.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"**USE AS SAVE FILES BUTTON**\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 138,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"#this cell is for occasional saving purposes and is not intended for final submission\\n\",\r\n    \"\\n\",\r\n    \"all_goals.to_csv('created/all_goals.csv')\\n\",\r\n    \"goals.to_csv('created/goals.csv')\\n\",\r\n    \"matches.to_csv('created/matches.csv')\\n\",\r\n    \"penalties.to_csv('created/penalties.csv')\\n\",\r\n    \"minute_v_goal.to_csv('created/goal_grouped_by_minute.csv')\\n\",\r\n    \"num_cols.to_csv('created/num_cols.csv')\\n\",\r\n    \"grouped_by_players.to_csv('created/grouped_by_players.csv')\\n\",\r\n    \"top_10_players.to_csv('created/top_10_players.csv')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-04-02T14:28:21.320766Z\",\r\n     \"end_time\": \"2023-04-02T14:28:22.085724Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"**USE AS LOAD FILES BUTTON**\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 64,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"#this cell is for occasional intermediate loading purposes and is not intended for final submission\\n\",\r\n    \"\\n\",\r\n    \"all_goals = pd.read_csv('created/all_goals.csv')\\n\",\r\n    \"goals = pd.read_csv('created/goals.csv')\\n\",\r\n    \"matches = pd.read_csv('created/matches.csv')\\n\",\r\n    \"penalties = pd.read_csv('created/penalties.csv')\\n\",\r\n    \"minute_v_goal = pd.read_csv('created/goal_grouped_by_minute.csv')\\n\",\r\n    \"num_cols = pd.read_csv('created/num_cols.csv')\\n\",\r\n    \"grouped_by_players = pd.read_csv('created/grouped_by_players.csv')\\n\",\r\n    \"top_10_players = pd.read_csv('created/top_10_players.csv')\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-04-02T10:36:14.332673Z\",\r\n     \"end_time\": \"2023-04-02T10:36:14.397885Z\"\r\n    }\r\n   }\r\n  }\r\n ],\r\n \"metadata\": {\r\n  \"kernelspec\": {\r\n   \"display_name\": \"Python 3\",\r\n   \"language\": \"python\",\r\n   \"name\": \"python3\"\r\n  },\r\n  \"language_info\": {\r\n   \"codemirror_mode\": {\r\n    \"name\": \"ipython\",\r\n    \"version\": 2\r\n   },\r\n   \"file_extension\": \".py\",\r\n   \"mimetype\": \"text/x-python\",\r\n   \"name\": \"python\",\r\n   \"nbconvert_exporter\": \"python\",\r\n   \"pygments_lexer\": \"ipython2\",\r\n   \"version\": \"2.7.6\"\r\n  }\r\n },\r\n \"nbformat\": 4,\r\n \"nbformat_minor\": 0\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DE_PROJECT.ipynb b/DE_PROJECT.ipynb
--- a/DE_PROJECT.ipynb	
+++ b/DE_PROJECT.ipynb	
@@ -853,6 +853,15 @@
    }
   },
   {
+   "cell_type": "markdown",
+   "source": [
+    "##### 1. Who is the top player in international football?"
+   ],
+   "metadata": {
+    "collapsed": false
+   }
+  },
+  {
    "cell_type": "code",
    "execution_count": 91,
    "outputs": [
@@ -975,9 +984,72 @@
   {
    "cell_type": "markdown",
    "source": [
+    "**Key Insights:**\n",
     "Clearly, **Cristiano Ronaldo** appears to be far ahead of his competitors in total number of goals as penalties (as per this dataset, which is not very accurate).\n",
     "On the other hand, **Lionel Messi**, despite his reputation and stunning performances for club, is far behind Ronaldo in international matches."
    ],
+   "metadata": {
+    "collapsed": false
+   }
+  },
+  {
+   "cell_type": "markdown",
+   "source": [
+    "##### 2. How the number of goals scored has changed over the years?"
+   ],
+   "metadata": {
+    "collapsed": false
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 176,
+   "outputs": [
+    {
+     "ename": "KeyError",
+     "evalue": "'year'",
+     "output_type": "error",
+     "traceback": [
+      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
+      "\u001B[1;31mKeyError\u001B[0m                                  Traceback (most recent call last)",
+      "Cell \u001B[1;32mIn[176], line 12\u001B[0m\n\u001B[0;32m      8\u001B[0m match_years[\u001B[38;5;124m'\u001B[39m\u001B[38;5;124myear\u001B[39m\u001B[38;5;124m'\u001B[39m] \u001B[38;5;241m=\u001B[39m year_m\n\u001B[0;32m     11\u001B[0m goal_years \u001B[38;5;241m=\u001B[39m goal_years\u001B[38;5;241m.\u001B[39mgroupby(\u001B[38;5;124m'\u001B[39m\u001B[38;5;124myear\u001B[39m\u001B[38;5;124m'\u001B[39m)\u001B[38;5;241m.\u001B[39msum(numeric_only\u001B[38;5;241m=\u001B[39m\u001B[38;5;28;01mTrue\u001B[39;00m)[\u001B[38;5;241m-\u001B[39m\u001B[38;5;241m10\u001B[39m:]\n\u001B[1;32m---> 12\u001B[0m match_years \u001B[38;5;241m=\u001B[39m \u001B[43mall_goals\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mgroupby\u001B[49m\u001B[43m(\u001B[49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[38;5;124;43myear\u001B[39;49m\u001B[38;5;124;43m'\u001B[39;49m\u001B[43m)\u001B[49m\u001B[38;5;241m.\u001B[39mcount()\n\u001B[0;32m     14\u001B[0m ax6 \u001B[38;5;241m=\u001B[39m sns\u001B[38;5;241m.\u001B[39mlineplot(data\u001B[38;5;241m=\u001B[39mgoal_years, x\u001B[38;5;241m=\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124myear\u001B[39m\u001B[38;5;124m'\u001B[39m, y\u001B[38;5;241m=\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mtotal_goals\u001B[39m\u001B[38;5;124m'\u001B[39m)\n\u001B[0;32m     15\u001B[0m sns\u001B[38;5;241m.\u001B[39mbarplot(data\u001B[38;5;241m=\u001B[39mmatch_years, y\u001B[38;5;241m=\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mhome_goal\u001B[39m\u001B[38;5;124m'\u001B[39m)\n",
+      "File \u001B[1;32m~\\DataspellProjects\\ipl-analysis\\venv\\lib\\site-packages\\pandas\\core\\frame.py:8402\u001B[0m, in \u001B[0;36mDataFrame.groupby\u001B[1;34m(self, by, axis, level, as_index, sort, group_keys, squeeze, observed, dropna)\u001B[0m\n\u001B[0;32m   8399\u001B[0m     \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mTypeError\u001B[39;00m(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mYou have to supply one of \u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mby\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124m and \u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124mlevel\u001B[39m\u001B[38;5;124m'\u001B[39m\u001B[38;5;124m\"\u001B[39m)\n\u001B[0;32m   8400\u001B[0m axis \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_get_axis_number(axis)\n\u001B[1;32m-> 8402\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[43mDataFrameGroupBy\u001B[49m\u001B[43m(\u001B[49m\n\u001B[0;32m   8403\u001B[0m \u001B[43m    \u001B[49m\u001B[43mobj\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;28;43mself\u001B[39;49m\u001B[43m,\u001B[49m\n\u001B[0;32m   8404\u001B[0m \u001B[43m    \u001B[49m\u001B[43mkeys\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mby\u001B[49m\u001B[43m,\u001B[49m\n\u001B[0;32m   8405\u001B[0m \u001B[43m    \u001B[49m\u001B[43maxis\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43maxis\u001B[49m\u001B[43m,\u001B[49m\n\u001B[0;32m   8406\u001B[0m \u001B[43m    \u001B[49m\u001B[43mlevel\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mlevel\u001B[49m\u001B[43m,\u001B[49m\n\u001B[0;32m   8407\u001B[0m \u001B[43m    \u001B[49m\u001B[43mas_index\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mas_index\u001B[49m\u001B[43m,\u001B[49m\n\u001B[0;32m   8408\u001B[0m \u001B[43m    \u001B[49m\u001B[43msort\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43msort\u001B[49m\u001B[43m,\u001B[49m\n\u001B[0;32m   8409\u001B[0m \u001B[43m    \u001B[49m\u001B[43mgroup_keys\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mgroup_keys\u001B[49m\u001B[43m,\u001B[49m\n\u001B[0;32m   8410\u001B[0m \u001B[43m    \u001B[49m\u001B[43msqueeze\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43msqueeze\u001B[49m\u001B[43m,\u001B[49m\n\u001B[0;32m   8411\u001B[0m \u001B[43m    \u001B[49m\u001B[43mobserved\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mobserved\u001B[49m\u001B[43m,\u001B[49m\n\u001B[0;32m   8412\u001B[0m \u001B[43m    \u001B[49m\u001B[43mdropna\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mdropna\u001B[49m\u001B[43m,\u001B[49m\n\u001B[0;32m   8413\u001B[0m \u001B[43m\u001B[49m\u001B[43m)\u001B[49m\n",
+      "File \u001B[1;32m~\\DataspellProjects\\ipl-analysis\\venv\\lib\\site-packages\\pandas\\core\\groupby\\groupby.py:965\u001B[0m, in \u001B[0;36mGroupBy.__init__\u001B[1;34m(self, obj, keys, axis, level, grouper, exclusions, selection, as_index, sort, group_keys, squeeze, observed, mutated, dropna)\u001B[0m\n\u001B[0;32m    962\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m grouper \u001B[38;5;129;01mis\u001B[39;00m \u001B[38;5;28;01mNone\u001B[39;00m:\n\u001B[0;32m    963\u001B[0m     \u001B[38;5;28;01mfrom\u001B[39;00m \u001B[38;5;21;01mpandas\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mcore\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mgroupby\u001B[39;00m\u001B[38;5;21;01m.\u001B[39;00m\u001B[38;5;21;01mgrouper\u001B[39;00m \u001B[38;5;28;01mimport\u001B[39;00m get_grouper\n\u001B[1;32m--> 965\u001B[0m     grouper, exclusions, obj \u001B[38;5;241m=\u001B[39m \u001B[43mget_grouper\u001B[49m\u001B[43m(\u001B[49m\n\u001B[0;32m    966\u001B[0m \u001B[43m        \u001B[49m\u001B[43mobj\u001B[49m\u001B[43m,\u001B[49m\n\u001B[0;32m    967\u001B[0m \u001B[43m        \u001B[49m\u001B[43mkeys\u001B[49m\u001B[43m,\u001B[49m\n\u001B[0;32m    968\u001B[0m \u001B[43m        \u001B[49m\u001B[43maxis\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43maxis\u001B[49m\u001B[43m,\u001B[49m\n\u001B[0;32m    969\u001B[0m \u001B[43m        \u001B[49m\u001B[43mlevel\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mlevel\u001B[49m\u001B[43m,\u001B[49m\n\u001B[0;32m    970\u001B[0m \u001B[43m        \u001B[49m\u001B[43msort\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43msort\u001B[49m\u001B[43m,\u001B[49m\n\u001B[0;32m    971\u001B[0m \u001B[43m        \u001B[49m\u001B[43mobserved\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[43mobserved\u001B[49m\u001B[43m,\u001B[49m\n\u001B[0;32m    972\u001B[0m \u001B[43m        \u001B[49m\u001B[43mmutated\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mmutated\u001B[49m\u001B[43m,\u001B[49m\n\u001B[0;32m    973\u001B[0m \u001B[43m        \u001B[49m\u001B[43mdropna\u001B[49m\u001B[38;5;241;43m=\u001B[39;49m\u001B[38;5;28;43mself\u001B[39;49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43mdropna\u001B[49m\u001B[43m,\u001B[49m\n\u001B[0;32m    974\u001B[0m \u001B[43m    \u001B[49m\u001B[43m)\u001B[49m\n\u001B[0;32m    976\u001B[0m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mobj \u001B[38;5;241m=\u001B[39m obj\n\u001B[0;32m    977\u001B[0m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39maxis \u001B[38;5;241m=\u001B[39m obj\u001B[38;5;241m.\u001B[39m_get_axis_number(axis)\n",
+      "File \u001B[1;32m~\\DataspellProjects\\ipl-analysis\\venv\\lib\\site-packages\\pandas\\core\\groupby\\grouper.py:888\u001B[0m, in \u001B[0;36mget_grouper\u001B[1;34m(obj, key, axis, level, sort, observed, mutated, validate, dropna)\u001B[0m\n\u001B[0;32m    886\u001B[0m         in_axis, level, gpr \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;01mFalse\u001B[39;00m, gpr, \u001B[38;5;28;01mNone\u001B[39;00m\n\u001B[0;32m    887\u001B[0m     \u001B[38;5;28;01melse\u001B[39;00m:\n\u001B[1;32m--> 888\u001B[0m         \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mKeyError\u001B[39;00m(gpr)\n\u001B[0;32m    889\u001B[0m \u001B[38;5;28;01melif\u001B[39;00m \u001B[38;5;28misinstance\u001B[39m(gpr, Grouper) \u001B[38;5;129;01mand\u001B[39;00m gpr\u001B[38;5;241m.\u001B[39mkey \u001B[38;5;129;01mis\u001B[39;00m \u001B[38;5;129;01mnot\u001B[39;00m \u001B[38;5;28;01mNone\u001B[39;00m:\n\u001B[0;32m    890\u001B[0m     \u001B[38;5;66;03m# Add key to exclusions\u001B[39;00m\n\u001B[0;32m    891\u001B[0m     exclusions\u001B[38;5;241m.\u001B[39madd(gpr\u001B[38;5;241m.\u001B[39mkey)\n",
+      "\u001B[1;31mKeyError\u001B[0m: 'year'"
+     ]
+    }
+   ],
+   "source": [
+    "goal_years = all_goals.copy()\n",
+    "goal_years['total_goals'] = goal_years['home_goal']+goal_years['away_goal']\n",
+    "year = goal_years.date.dt.year\n",
+    "goal_years['year'] = year.astype(int)\n",
+    "\n",
+    "year_m = all_goals['date'].dt.year\n",
+    "match_years = all_goals.copy()\n",
+    "match_years['year'] = year_m\n",
+    "\n",
+    "\n",
+    "goal_years = goal_years.groupby('year').sum(numeric_only=True)[-10:]\n",
+    "match_years = all_goals.groupby('year').count()\n",
+    "\n",
+    "ax6 = sns.lineplot(data=goal_years, x='year', y='total_goals')\n",
+    "sns.barplot(data=match_years, y='')"
+   ],
+   "metadata": {
+    "collapsed": false,
+    "ExecuteTime": {
+     "start_time": "2023-04-03T18:18:15.945665Z",
+     "end_time": "2023-04-03T18:18:16.230403Z"
+    }
+   }
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "outputs": [],
+   "source": [],
    "metadata": {
     "collapsed": false
    }
Index: .idea/jupyter-settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"JupyterPersistentConnectionParameters\">\r\n    <option name=\"moduleParameters\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$/../../DataspellProjects/AIDA Sem-1/.idea/COMP603.iml\">\r\n          <value>\r\n            <JupyterConnectionParameters>\r\n              <option name=\"managed\" value=\"true\" />\r\n            </JupyterConnectionParameters>\r\n          </value>\r\n        </entry>\r\n        <entry key=\"$PROJECT_DIR$/../../DataspellProjects/AIDA Sem-1/Python/10Mar2023/.idea/10Mar2023.iml\">\r\n          <value>\r\n            <JupyterConnectionParameters>\r\n              <option name=\"managed\" value=\"true\" />\r\n            </JupyterConnectionParameters>\r\n          </value>\r\n        </entry>\r\n        <entry key=\"$PROJECT_DIR$/../../DataspellProjects/COMP603/.idea/COMP603.iml\">\r\n          <value>\r\n            <JupyterConnectionParameters>\r\n              <option name=\"managed\" value=\"true\" />\r\n            </JupyterConnectionParameters>\r\n          </value>\r\n        </entry>\r\n        <entry key=\"$PROJECT_DIR$/../../DataspellProjects/nYr/.idea/nYr.iml\">\r\n          <value>\r\n            <JupyterConnectionParameters>\r\n              <option name=\"managed\" value=\"true\" />\r\n            </JupyterConnectionParameters>\r\n          </value>\r\n        </entry>\r\n        <entry key=\"$PROJECT_DIR$/.idea/DE_Project.iml\">\r\n          <value>\r\n            <JupyterConnectionParameters>\r\n              <option name=\"managed\" value=\"true\" />\r\n              <option name=\"sdkHomePath\" value=\"/usr/local/bin/python3.9\" />\r\n            </JupyterConnectionParameters>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/jupyter-settings.xml b/.idea/jupyter-settings.xml
--- a/.idea/jupyter-settings.xml	
+++ b/.idea/jupyter-settings.xml	
@@ -3,39 +3,39 @@
   <component name="JupyterPersistentConnectionParameters">
     <option name="moduleParameters">
       <map>
-        <entry key="$PROJECT_DIR$/../../DataspellProjects/AIDA Sem-1/.idea/COMP603.iml">
+        <entry key="$PROJECT_DIR$/../AIDA Sem-1/.idea/COMP603.iml">
           <value>
             <JupyterConnectionParameters>
               <option name="managed" value="true" />
             </JupyterConnectionParameters>
           </value>
         </entry>
-        <entry key="$PROJECT_DIR$/../../DataspellProjects/AIDA Sem-1/Python/10Mar2023/.idea/10Mar2023.iml">
+        <entry key="$PROJECT_DIR$/../AIDA Sem-1/Python/10Mar2023/.idea/10Mar2023.iml">
           <value>
             <JupyterConnectionParameters>
               <option name="managed" value="true" />
             </JupyterConnectionParameters>
           </value>
         </entry>
-        <entry key="$PROJECT_DIR$/../../DataspellProjects/COMP603/.idea/COMP603.iml">
+        <entry key="$PROJECT_DIR$/../COMP603/.idea/COMP603.iml">
           <value>
             <JupyterConnectionParameters>
               <option name="managed" value="true" />
             </JupyterConnectionParameters>
           </value>
         </entry>
-        <entry key="$PROJECT_DIR$/../../DataspellProjects/nYr/.idea/nYr.iml">
+        <entry key="$PROJECT_DIR$/.idea/DE_Project.iml">
           <value>
             <JupyterConnectionParameters>
               <option name="managed" value="true" />
+              <option name="sdkHomePath" value="/usr/local/bin/python3.9" />
             </JupyterConnectionParameters>
           </value>
         </entry>
-        <entry key="$PROJECT_DIR$/.idea/DE_Project.iml">
+        <entry key="$PROJECT_DIR$/../nYr/.idea/nYr.iml">
           <value>
             <JupyterConnectionParameters>
               <option name="managed" value="true" />
-              <option name="sdkHomePath" value="/usr/local/bin/python3.9" />
             </JupyterConnectionParameters>
           </value>
         </entry>
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"bf6acb4f-e128-42c3-8efe-f944ca839b7f\" name=\"Changes\" comment=\"Added Heatmap visualization and save images for all visualization\">\r\n      <change afterPath=\"$PROJECT_DIR$/figures/heatmap_home_team_VS_away_team_are_winner.jpg\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/figures/goal_vs_penalties.jpg\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/figures/goal_vs_penalties.jpg\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/figures/heatmap_home_team_VS_away_team_who_wins.jpg\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/sahil_work.ipynb\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/sahil_work.ipynb\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2NmhdRk8vGHxgLi5SxnqcdzER0I\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"ASKED_ADD_EXTERNAL_FILES\": \"true\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"git-widget-placeholder\": \"Sahil__Nayyar\",\r\n    \"last_opened_file_path\": \"/Users/sahilnayyar/Library/CloudStorage/OneDrive-Personal/GitHub/DE_Project\",\r\n    \"settings.editor.selected.configurable\": \"org.jetbrains.plugins.notebooks.jupyter.connections.configuration.JupyterServerConfigurable\"\r\n  }\r\n}]]></component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"Testing Commit\" />\r\n    <MESSAGE value=\"testing git on project\" />\r\n    <MESSAGE value=\"Merge remote-tracking branch 'origin/main'\" />\r\n    <MESSAGE value=\"changed pkls to csv\" />\r\n    <MESSAGE value=\"Added Heatmap visualization and save images for all visualization\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Added Heatmap visualization and save images for all visualization\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -4,12 +4,12 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="bf6acb4f-e128-42c3-8efe-f944ca839b7f" name="Changes" comment="Added Heatmap visualization and save images for all visualization">
-      <change afterPath="$PROJECT_DIR$/figures/heatmap_home_team_VS_away_team_are_winner.jpg" afterDir="false" />
+    <list default="true" id="bf6acb4f-e128-42c3-8efe-f944ca839b7f" name="Changes" comment="changed pkls to csv">
+      <change beforePath="$PROJECT_DIR$/.idea/jupyter-settings.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/jupyter-settings.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/figures/goal_vs_penalties.jpg" beforeDir="false" afterPath="$PROJECT_DIR$/figures/goal_vs_penalties.jpg" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/figures/heatmap_home_team_VS_away_team_who_wins.jpg" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/sahil_work.ipynb" beforeDir="false" afterPath="$PROJECT_DIR$/sahil_work.ipynb" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/DE_PROJECT.ipynb" beforeDir="false" afterPath="$PROJECT_DIR$/DE_PROJECT.ipynb" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Group Project.docx" beforeDir="false" afterPath="$PROJECT_DIR$/Group Project.docx" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -35,17 +35,16 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "ASKED_ADD_EXTERNAL_FILES": "true",
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "WebServerToolWindowFactoryState": "false",
-    "git-widget-placeholder": "Sahil__Nayyar",
-    "last_opened_file_path": "/Users/sahilnayyar/Library/CloudStorage/OneDrive-Personal/GitHub/DE_Project",
-    "settings.editor.selected.configurable": "org.jetbrains.plugins.notebooks.jupyter.connections.configuration.JupyterServerConfigurable"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;org.jetbrains.plugins.notebooks.jupyter.connections.configuration.JupyterServerConfigurable&quot;
   }
-}]]></component>
+}</component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="VcsManagerConfiguration">
     <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
@@ -53,7 +52,6 @@
     <MESSAGE value="testing git on project" />
     <MESSAGE value="Merge remote-tracking branch 'origin/main'" />
     <MESSAGE value="changed pkls to csv" />
-    <MESSAGE value="Added Heatmap visualization and save images for all visualization" />
-    <option name="LAST_COMMIT_MESSAGE" value="Added Heatmap visualization and save images for all visualization" />
+    <option name="LAST_COMMIT_MESSAGE" value="changed pkls to csv" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.9\" project-jdk-type=\"Python SDK\" />\r\n  <component name=\"PyCharmDSProjectLayout\">\r\n    <option name=\"id\" value=\"JupyterRightHiddenStructureLayout\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	
+++ b/.idea/misc.xml	
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10 (venv) (3)" project-jdk-type="Python SDK" />
   <component name="PyCharmDSProjectLayout">
     <option name="id" value="JupyterRightHiddenStructureLayout" />
   </component>
